
lab7_app.elf:     file format elf32-littlenios2
lab7_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000020

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000008b4 memsz 0x000008b4 flags r-x
    LOAD off    0x000018d4 vaddr 0x100008d4 paddr 0x10000ec0 align 2**12
         filesz 0x000005ec memsz 0x000005ec flags rw-
    LOAD off    0x000024ac vaddr 0x100014ac paddr 0x100014ac align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  10000020  10000020  00001ec0  2**0
                  CONTENTS
  2 .text         000008a4  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  100008c4  100008c4  000018c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005ec  100008d4  10000ec0  000018d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  100014ac  100014ac  000024ac  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00001ec0  2**0
                  CONTENTS
  7 .sdram        00000000  100014bc  100014bc  00001ec0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000002b0  00000000  00000000  00001ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000398e  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000116a  00000000  00000000  00005b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001220  00000000  00000000  00006c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000040c  00000000  00000000  00007eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000e48  00000000  00000000  000082bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000408  00000000  00000000  00009104  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000950c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000038  00000000  00000000  00009520  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000a7a8  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0000a7ab  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000a7b7  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000a7b8  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0000a7b9  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0000a7bd  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0000a7c1  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0000a7c5  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0000a7c9  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0000a7cd  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0000a7d1  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000000e  00000000  00000000  0000a7d9  2**0
                  CONTENTS, READONLY
 30 .jdi          00003db5  00000000  00000000  0000a7e7  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00059270  00000000  00000000  0000e59c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000020 l    d  .text	00000000 .text
100008c4 l    d  .rodata	00000000 .rodata
100008d4 l    d  .rwdata	00000000 .rwdata
100014ac l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100014bc l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab7_app_bsp//obj/HAL/src/crt0.o
10000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
100000fc l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
10000290 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
100003d4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
10000a7c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
100001e0 g     F .text	0000005c alt_main
10000ec0 g       *ABS*	00000000 __flash_rwdata_start
10000554 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
100014b8 g     O .bss	00000004 errno
100014b0 g     O .bss	00000004 alt_argv
10008ea0 g       *ABS*	00000000 _gp
100008fc g     O .rwdata	00000180 alt_fd_list
100008c4 g       *ABS*	00000000 __DTOR_END__
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10000eb0 g     O .rwdata	00000004 alt_max_fd
10000eb8 g     O .rwdata	00000004 _global_impure_ptr
100014bc g       *ABS*	00000000 __bss_end
100008d4 g     O .rwdata	00000028 alt_dev_null
100003b8 g     F .text	0000001c alt_dcache_flush_all
10000ec0 g       *ABS*	00000000 __ram_rwdata_end
10000ea8 g     O .rwdata	00000008 alt_dev_list
100008d4 g       *ABS*	00000000 __ram_rodata_end
100014bc g       *ABS*	00000000 end
100008c4 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100006d4 g     F .text	00000194 __call_exitprocs
10000020 g     F .text	0000003c _start
10000270 g     F .text	00000020 alt_sys_init
100005c0 g     F .text	00000114 __register_exitproc
10000868 g     F .text	00000028 .hidden __mulsi3
100008d4 g       *ABS*	00000000 __ram_rwdata_start
100008c4 g       *ABS*	00000000 __ram_rodata_start
100014bc g       *ABS*	00000000 __alt_stack_base
100014ac g       *ABS*	00000000 __bss_start
1000005c g     F .text	000000a0 main
100014b4 g     O .bss	00000004 alt_envp
10000eb4 g     O .rwdata	00000004 alt_errno
100008c4 g       *ABS*	00000000 __CTOR_END__
100008c4 g       *ABS*	00000000 __flash_rodata_start
100008c4 g       *ABS*	00000000 __DTOR_LIST__
1000023c g     F .text	00000034 alt_irq_init
100004d4 g     F .text	00000080 alt_release_fd
10000574 g     F .text	00000014 atexit
10000ebc g     O .rwdata	00000004 _impure_ptr
100014ac g     O .bss	00000004 alt_argc
1000045c g     F .text	0000005c _do_dtors
10000ea0 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10000ec0 g       *ABS*	00000000 _edata
100014bc g       *ABS*	00000000 _end
10000020 g       *ABS*	00000000 __ram_exceptions_end
10000588 g     F .text	00000038 exit
18000000 g       *ABS*	00000000 __alt_data_end
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000890 g     F .text	00000034 _exit
100004b8 g     F .text	0000001c alt_icache_flush_all
10000400 g     F .text	0000005c _do_ctors
100002e0 g     F .text	000000d8 close
10000160 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08400814 	ori	at,at,32
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .text:

10000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000020:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000028:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
1000002c:	d6a3a814 	ori	gp,gp,36512
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000030:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000034:	10852b14 	ori	r2,r2,5292

    movhi r3, %hi(__bss_end)
10000038:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
1000003c:	18c52f14 	ori	r3,r3,5308

    beq r2, r3, 1f
10000040:	10c00326 	beq	r2,r3,10000050 <_start+0x30>

0:
    stw zero, (r2)
10000044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000004c:	10fffd36 	bltu	r2,r3,10000044 <__alt_data_end+0xf8000044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000050:	00001600 	call	10000160 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000054:	00001e00 	call	100001e0 <alt_main>

10000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000058:	003fff06 	br	10000058 <__alt_data_end+0xf8000058>

1000005c <main>:
// Main.c - makes LEDG0 on DE2-115 board blink if NIOS II is set up correctly
// for ECE 385 - University of Illinois - Electrical and Computer Engineering
// Author: Zuofu Cheng

int main()
{
1000005c:	defffa04 	addi	sp,sp,-24
10000060:	df000515 	stw	fp,20(sp)
10000064:	df000504 	addi	fp,sp,20
	int i, accum = 0;
10000068:	e03ffb15 	stw	zero,-20(fp)
	volatile unsigned int *LED_PIO = (unsigned int*)0x50; //make a pointer to access the PIO block
1000006c:	00801404 	movi	r2,80
10000070:	e0bffc15 	stw	r2,-16(fp)
	volatile unsigned int *SW_PIO = (unsigned int*)0x20;
10000074:	00800804 	movi	r2,32
10000078:	e0bffd15 	stw	r2,-12(fp)
	volatile unsigned int *KEY2_PIO = (unsigned int*)0x40;
1000007c:	00801004 	movi	r2,64
10000080:	e0bffe15 	stw	r2,-8(fp)
	volatile unsigned int *KEY3_PIO = (unsigned int*)0x30;
10000084:	00800c04 	movi	r2,48
10000088:	e0bfff15 	stw	r2,-4(fp)
	*LED_PIO = 0; //clear all LEDs
1000008c:	e0bffc17 	ldw	r2,-16(fp)
10000090:	10000015 	stw	zero,0(r2)

	while((1+3) != 0)
	{
		if(*KEY2_PIO == 0x1){
10000094:	e0bffe17 	ldw	r2,-8(fp)
10000098:	10800017 	ldw	r2,0(r2)
1000009c:	10800058 	cmpnei	r2,r2,1
100000a0:	1000021e 	bne	r2,zero,100000ac <main+0x50>
			*LED_PIO = 0;
100000a4:	e0bffc17 	ldw	r2,-16(fp)
100000a8:	10000015 	stw	zero,0(r2)
		}
		if(*KEY3_PIO == 0x1 && (accum == 0)){
100000ac:	e0bfff17 	ldw	r2,-4(fp)
100000b0:	10800017 	ldw	r2,0(r2)
100000b4:	10800058 	cmpnei	r2,r2,1
100000b8:	10000b1e 	bne	r2,zero,100000e8 <main+0x8c>
100000bc:	e0bffb17 	ldw	r2,-20(fp)
100000c0:	1000091e 	bne	r2,zero,100000e8 <main+0x8c>
			*LED_PIO += *SW_PIO;
100000c4:	e0bffd17 	ldw	r2,-12(fp)
100000c8:	10800017 	ldw	r2,0(r2)
100000cc:	e0fffc17 	ldw	r3,-16(fp)
100000d0:	18c00017 	ldw	r3,0(r3)
100000d4:	1887883a 	add	r3,r3,r2
100000d8:	e0bffc17 	ldw	r2,-16(fp)
100000dc:	10c00015 	stw	r3,0(r2)
			accum = 1;
100000e0:	00800044 	movi	r2,1
100000e4:	e0bffb15 	stw	r2,-20(fp)
		}
		if(*KEY3_PIO == 0x0){
100000e8:	e0bfff17 	ldw	r2,-4(fp)
100000ec:	10800017 	ldw	r2,0(r2)
100000f0:	1000011e 	bne	r2,zero,100000f8 <main+0x9c>
			accum = 0;
100000f4:	e03ffb15 	stw	zero,-20(fp)
		}
	}
100000f8:	003fe606 	br	10000094 <__alt_data_end+0xf8000094>

100000fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
100000fc:	defffc04 	addi	sp,sp,-16
10000100:	df000315 	stw	fp,12(sp)
10000104:	df000304 	addi	fp,sp,12
10000108:	e13ffd15 	stw	r4,-12(fp)
1000010c:	e17ffe15 	stw	r5,-8(fp)
10000110:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10000114:	e0fffe17 	ldw	r3,-8(fp)
10000118:	e0bffd17 	ldw	r2,-12(fp)
1000011c:	18800c26 	beq	r3,r2,10000150 <alt_load_section+0x54>
  {
    while( to != end )
10000120:	00000806 	br	10000144 <alt_load_section+0x48>
    {
      *to++ = *from++;
10000124:	e0bffe17 	ldw	r2,-8(fp)
10000128:	10c00104 	addi	r3,r2,4
1000012c:	e0fffe15 	stw	r3,-8(fp)
10000130:	e0fffd17 	ldw	r3,-12(fp)
10000134:	19000104 	addi	r4,r3,4
10000138:	e13ffd15 	stw	r4,-12(fp)
1000013c:	18c00017 	ldw	r3,0(r3)
10000140:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10000144:	e0fffe17 	ldw	r3,-8(fp)
10000148:	e0bfff17 	ldw	r2,-4(fp)
1000014c:	18bff51e 	bne	r3,r2,10000124 <__alt_data_end+0xf8000124>
    {
      *to++ = *from++;
    }
  }
}
10000150:	e037883a 	mov	sp,fp
10000154:	df000017 	ldw	fp,0(sp)
10000158:	dec00104 	addi	sp,sp,4
1000015c:	f800283a 	ret

10000160 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10000160:	defffe04 	addi	sp,sp,-8
10000164:	dfc00115 	stw	ra,4(sp)
10000168:	df000015 	stw	fp,0(sp)
1000016c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10000170:	01040034 	movhi	r4,4096
10000174:	2103b004 	addi	r4,r4,3776
10000178:	01440034 	movhi	r5,4096
1000017c:	29423504 	addi	r5,r5,2260
10000180:	01840034 	movhi	r6,4096
10000184:	3183b004 	addi	r6,r6,3776
10000188:	00000fc0 	call	100000fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000018c:	01040034 	movhi	r4,4096
10000190:	21000804 	addi	r4,r4,32
10000194:	01440034 	movhi	r5,4096
10000198:	29400804 	addi	r5,r5,32
1000019c:	01840034 	movhi	r6,4096
100001a0:	31800804 	addi	r6,r6,32
100001a4:	00000fc0 	call	100000fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100001a8:	01040034 	movhi	r4,4096
100001ac:	21023104 	addi	r4,r4,2244
100001b0:	01440034 	movhi	r5,4096
100001b4:	29423104 	addi	r5,r5,2244
100001b8:	01840034 	movhi	r6,4096
100001bc:	31823504 	addi	r6,r6,2260
100001c0:	00000fc0 	call	100000fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100001c4:	00003b80 	call	100003b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
100001c8:	00004b80 	call	100004b8 <alt_icache_flush_all>
}
100001cc:	e037883a 	mov	sp,fp
100001d0:	dfc00117 	ldw	ra,4(sp)
100001d4:	df000017 	ldw	fp,0(sp)
100001d8:	dec00204 	addi	sp,sp,8
100001dc:	f800283a 	ret

100001e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100001e0:	defffd04 	addi	sp,sp,-12
100001e4:	dfc00215 	stw	ra,8(sp)
100001e8:	df000115 	stw	fp,4(sp)
100001ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
100001f0:	0009883a 	mov	r4,zero
100001f4:	000023c0 	call	1000023c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
100001f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
100001fc:	00002700 	call	10000270 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10000200:	00004000 	call	10000400 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10000204:	01040034 	movhi	r4,4096
10000208:	21011704 	addi	r4,r4,1116
1000020c:	00005740 	call	10000574 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10000210:	d1218317 	ldw	r4,-31220(gp)
10000214:	d0e18417 	ldw	r3,-31216(gp)
10000218:	d0a18517 	ldw	r2,-31212(gp)
1000021c:	180b883a 	mov	r5,r3
10000220:	100d883a 	mov	r6,r2
10000224:	000005c0 	call	1000005c <main>
10000228:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000022c:	01000044 	movi	r4,1
10000230:	00002e00 	call	100002e0 <close>
  exit (result);
10000234:	e13fff17 	ldw	r4,-4(fp)
10000238:	00005880 	call	10000588 <exit>

1000023c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000023c:	defffd04 	addi	sp,sp,-12
10000240:	dfc00215 	stw	ra,8(sp)
10000244:	df000115 	stw	fp,4(sp)
10000248:	df000104 	addi	fp,sp,4
1000024c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10000250:	00005540 	call	10000554 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10000254:	00800044 	movi	r2,1
10000258:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000025c:	e037883a 	mov	sp,fp
10000260:	dfc00117 	ldw	ra,4(sp)
10000264:	df000017 	ldw	fp,0(sp)
10000268:	dec00204 	addi	sp,sp,8
1000026c:	f800283a 	ret

10000270 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10000270:	deffff04 	addi	sp,sp,-4
10000274:	df000015 	stw	fp,0(sp)
10000278:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000027c:	0001883a 	nop
}
10000280:	e037883a 	mov	sp,fp
10000284:	df000017 	ldw	fp,0(sp)
10000288:	dec00104 	addi	sp,sp,4
1000028c:	f800283a 	ret

10000290 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10000290:	defffe04 	addi	sp,sp,-8
10000294:	dfc00115 	stw	ra,4(sp)
10000298:	df000015 	stw	fp,0(sp)
1000029c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100002a0:	00840034 	movhi	r2,4096
100002a4:	1083ad04 	addi	r2,r2,3764
100002a8:	10800017 	ldw	r2,0(r2)
100002ac:	10000526 	beq	r2,zero,100002c4 <alt_get_errno+0x34>
100002b0:	00840034 	movhi	r2,4096
100002b4:	1083ad04 	addi	r2,r2,3764
100002b8:	10800017 	ldw	r2,0(r2)
100002bc:	103ee83a 	callr	r2
100002c0:	00000206 	br	100002cc <alt_get_errno+0x3c>
100002c4:	00840034 	movhi	r2,4096
100002c8:	10852e04 	addi	r2,r2,5304
}
100002cc:	e037883a 	mov	sp,fp
100002d0:	dfc00117 	ldw	ra,4(sp)
100002d4:	df000017 	ldw	fp,0(sp)
100002d8:	dec00204 	addi	sp,sp,8
100002dc:	f800283a 	ret

100002e0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100002e0:	defffb04 	addi	sp,sp,-20
100002e4:	dfc00415 	stw	ra,16(sp)
100002e8:	df000315 	stw	fp,12(sp)
100002ec:	df000304 	addi	fp,sp,12
100002f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100002f4:	e0bfff17 	ldw	r2,-4(fp)
100002f8:	10000816 	blt	r2,zero,1000031c <close+0x3c>
100002fc:	e13fff17 	ldw	r4,-4(fp)
10000300:	01400304 	movi	r5,12
10000304:	00008680 	call	10000868 <__mulsi3>
10000308:	1007883a 	mov	r3,r2
1000030c:	00840034 	movhi	r2,4096
10000310:	10823f04 	addi	r2,r2,2300
10000314:	1885883a 	add	r2,r3,r2
10000318:	00000106 	br	10000320 <close+0x40>
1000031c:	0005883a 	mov	r2,zero
10000320:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10000324:	e0bffd17 	ldw	r2,-12(fp)
10000328:	10001926 	beq	r2,zero,10000390 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000032c:	e0bffd17 	ldw	r2,-12(fp)
10000330:	10800017 	ldw	r2,0(r2)
10000334:	10800417 	ldw	r2,16(r2)
10000338:	10000626 	beq	r2,zero,10000354 <close+0x74>
1000033c:	e0bffd17 	ldw	r2,-12(fp)
10000340:	10800017 	ldw	r2,0(r2)
10000344:	10800417 	ldw	r2,16(r2)
10000348:	e13ffd17 	ldw	r4,-12(fp)
1000034c:	103ee83a 	callr	r2
10000350:	00000106 	br	10000358 <close+0x78>
10000354:	0005883a 	mov	r2,zero
10000358:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000035c:	e13fff17 	ldw	r4,-4(fp)
10000360:	00004d40 	call	100004d4 <alt_release_fd>
    if (rval < 0)
10000364:	e0bffe17 	ldw	r2,-8(fp)
10000368:	1000070e 	bge	r2,zero,10000388 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000036c:	00002900 	call	10000290 <alt_get_errno>
10000370:	1007883a 	mov	r3,r2
10000374:	e0bffe17 	ldw	r2,-8(fp)
10000378:	0085c83a 	sub	r2,zero,r2
1000037c:	18800015 	stw	r2,0(r3)
      return -1;
10000380:	00bfffc4 	movi	r2,-1
10000384:	00000706 	br	100003a4 <close+0xc4>
    }
    return 0;
10000388:	0005883a 	mov	r2,zero
1000038c:	00000506 	br	100003a4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10000390:	00002900 	call	10000290 <alt_get_errno>
10000394:	1007883a 	mov	r3,r2
10000398:	00801444 	movi	r2,81
1000039c:	18800015 	stw	r2,0(r3)
    return -1;
100003a0:	00bfffc4 	movi	r2,-1
  }
}
100003a4:	e037883a 	mov	sp,fp
100003a8:	dfc00117 	ldw	ra,4(sp)
100003ac:	df000017 	ldw	fp,0(sp)
100003b0:	dec00204 	addi	sp,sp,8
100003b4:	f800283a 	ret

100003b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100003b8:	deffff04 	addi	sp,sp,-4
100003bc:	df000015 	stw	fp,0(sp)
100003c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100003c4:	e037883a 	mov	sp,fp
100003c8:	df000017 	ldw	fp,0(sp)
100003cc:	dec00104 	addi	sp,sp,4
100003d0:	f800283a 	ret

100003d4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100003d4:	defffc04 	addi	sp,sp,-16
100003d8:	df000315 	stw	fp,12(sp)
100003dc:	df000304 	addi	fp,sp,12
100003e0:	e13ffd15 	stw	r4,-12(fp)
100003e4:	e17ffe15 	stw	r5,-8(fp)
100003e8:	e1bfff15 	stw	r6,-4(fp)
  return len;
100003ec:	e0bfff17 	ldw	r2,-4(fp)
}
100003f0:	e037883a 	mov	sp,fp
100003f4:	df000017 	ldw	fp,0(sp)
100003f8:	dec00104 	addi	sp,sp,4
100003fc:	f800283a 	ret

10000400 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10000400:	defffd04 	addi	sp,sp,-12
10000404:	dfc00215 	stw	ra,8(sp)
10000408:	df000115 	stw	fp,4(sp)
1000040c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10000410:	00840034 	movhi	r2,4096
10000414:	10823004 	addi	r2,r2,2240
10000418:	e0bfff15 	stw	r2,-4(fp)
1000041c:	00000606 	br	10000438 <_do_ctors+0x38>
        (*ctor) (); 
10000420:	e0bfff17 	ldw	r2,-4(fp)
10000424:	10800017 	ldw	r2,0(r2)
10000428:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000042c:	e0bfff17 	ldw	r2,-4(fp)
10000430:	10bfff04 	addi	r2,r2,-4
10000434:	e0bfff15 	stw	r2,-4(fp)
10000438:	e0ffff17 	ldw	r3,-4(fp)
1000043c:	00840034 	movhi	r2,4096
10000440:	10823104 	addi	r2,r2,2244
10000444:	18bff62e 	bgeu	r3,r2,10000420 <__alt_data_end+0xf8000420>
        (*ctor) (); 
}
10000448:	e037883a 	mov	sp,fp
1000044c:	dfc00117 	ldw	ra,4(sp)
10000450:	df000017 	ldw	fp,0(sp)
10000454:	dec00204 	addi	sp,sp,8
10000458:	f800283a 	ret

1000045c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000045c:	defffd04 	addi	sp,sp,-12
10000460:	dfc00215 	stw	ra,8(sp)
10000464:	df000115 	stw	fp,4(sp)
10000468:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000046c:	00840034 	movhi	r2,4096
10000470:	10823004 	addi	r2,r2,2240
10000474:	e0bfff15 	stw	r2,-4(fp)
10000478:	00000606 	br	10000494 <_do_dtors+0x38>
        (*dtor) (); 
1000047c:	e0bfff17 	ldw	r2,-4(fp)
10000480:	10800017 	ldw	r2,0(r2)
10000484:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10000488:	e0bfff17 	ldw	r2,-4(fp)
1000048c:	10bfff04 	addi	r2,r2,-4
10000490:	e0bfff15 	stw	r2,-4(fp)
10000494:	e0ffff17 	ldw	r3,-4(fp)
10000498:	00840034 	movhi	r2,4096
1000049c:	10823104 	addi	r2,r2,2244
100004a0:	18bff62e 	bgeu	r3,r2,1000047c <__alt_data_end+0xf800047c>
        (*dtor) (); 
}
100004a4:	e037883a 	mov	sp,fp
100004a8:	dfc00117 	ldw	ra,4(sp)
100004ac:	df000017 	ldw	fp,0(sp)
100004b0:	dec00204 	addi	sp,sp,8
100004b4:	f800283a 	ret

100004b8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100004b8:	deffff04 	addi	sp,sp,-4
100004bc:	df000015 	stw	fp,0(sp)
100004c0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100004c4:	e037883a 	mov	sp,fp
100004c8:	df000017 	ldw	fp,0(sp)
100004cc:	dec00104 	addi	sp,sp,4
100004d0:	f800283a 	ret

100004d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
100004d4:	defffc04 	addi	sp,sp,-16
100004d8:	dfc00315 	stw	ra,12(sp)
100004dc:	df000215 	stw	fp,8(sp)
100004e0:	dc000115 	stw	r16,4(sp)
100004e4:	df000204 	addi	fp,sp,8
100004e8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
100004ec:	e0bffe17 	ldw	r2,-8(fp)
100004f0:	108000d0 	cmplti	r2,r2,3
100004f4:	1000111e 	bne	r2,zero,1000053c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
100004f8:	04040034 	movhi	r16,4096
100004fc:	84023f04 	addi	r16,r16,2300
10000500:	e0bffe17 	ldw	r2,-8(fp)
10000504:	1009883a 	mov	r4,r2
10000508:	01400304 	movi	r5,12
1000050c:	00008680 	call	10000868 <__mulsi3>
10000510:	8085883a 	add	r2,r16,r2
10000514:	10800204 	addi	r2,r2,8
10000518:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000051c:	04040034 	movhi	r16,4096
10000520:	84023f04 	addi	r16,r16,2300
10000524:	e0bffe17 	ldw	r2,-8(fp)
10000528:	1009883a 	mov	r4,r2
1000052c:	01400304 	movi	r5,12
10000530:	00008680 	call	10000868 <__mulsi3>
10000534:	8085883a 	add	r2,r16,r2
10000538:	10000015 	stw	zero,0(r2)
  }
}
1000053c:	e6ffff04 	addi	sp,fp,-4
10000540:	dfc00217 	ldw	ra,8(sp)
10000544:	df000117 	ldw	fp,4(sp)
10000548:	dc000017 	ldw	r16,0(sp)
1000054c:	dec00304 	addi	sp,sp,12
10000550:	f800283a 	ret

10000554 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10000554:	deffff04 	addi	sp,sp,-4
10000558:	df000015 	stw	fp,0(sp)
1000055c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10000560:	000170fa 	wrctl	ienable,zero
}
10000564:	e037883a 	mov	sp,fp
10000568:	df000017 	ldw	fp,0(sp)
1000056c:	dec00104 	addi	sp,sp,4
10000570:	f800283a 	ret

10000574 <atexit>:
10000574:	200b883a 	mov	r5,r4
10000578:	000d883a 	mov	r6,zero
1000057c:	0009883a 	mov	r4,zero
10000580:	000f883a 	mov	r7,zero
10000584:	00005c01 	jmpi	100005c0 <__register_exitproc>

10000588 <exit>:
10000588:	defffe04 	addi	sp,sp,-8
1000058c:	000b883a 	mov	r5,zero
10000590:	dc000015 	stw	r16,0(sp)
10000594:	dfc00115 	stw	ra,4(sp)
10000598:	2021883a 	mov	r16,r4
1000059c:	00006d40 	call	100006d4 <__call_exitprocs>
100005a0:	00840034 	movhi	r2,4096
100005a4:	1083ae04 	addi	r2,r2,3768
100005a8:	11000017 	ldw	r4,0(r2)
100005ac:	20800f17 	ldw	r2,60(r4)
100005b0:	10000126 	beq	r2,zero,100005b8 <exit+0x30>
100005b4:	103ee83a 	callr	r2
100005b8:	8009883a 	mov	r4,r16
100005bc:	00008900 	call	10000890 <_exit>

100005c0 <__register_exitproc>:
100005c0:	00840034 	movhi	r2,4096
100005c4:	defffa04 	addi	sp,sp,-24
100005c8:	1083ae04 	addi	r2,r2,3768
100005cc:	dc000315 	stw	r16,12(sp)
100005d0:	14000017 	ldw	r16,0(r2)
100005d4:	dc400415 	stw	r17,16(sp)
100005d8:	dfc00515 	stw	ra,20(sp)
100005dc:	80805217 	ldw	r2,328(r16)
100005e0:	2023883a 	mov	r17,r4
100005e4:	10003626 	beq	r2,zero,100006c0 <__register_exitproc+0x100>
100005e8:	10c00117 	ldw	r3,4(r2)
100005ec:	010007c4 	movi	r4,31
100005f0:	20c00e16 	blt	r4,r3,1000062c <__register_exitproc+0x6c>
100005f4:	1a400044 	addi	r9,r3,1
100005f8:	8800211e 	bne	r17,zero,10000680 <__register_exitproc+0xc0>
100005fc:	18c00084 	addi	r3,r3,2
10000600:	18c7883a 	add	r3,r3,r3
10000604:	18c7883a 	add	r3,r3,r3
10000608:	12400115 	stw	r9,4(r2)
1000060c:	10c7883a 	add	r3,r2,r3
10000610:	19400015 	stw	r5,0(r3)
10000614:	0005883a 	mov	r2,zero
10000618:	dfc00517 	ldw	ra,20(sp)
1000061c:	dc400417 	ldw	r17,16(sp)
10000620:	dc000317 	ldw	r16,12(sp)
10000624:	dec00604 	addi	sp,sp,24
10000628:	f800283a 	ret
1000062c:	00800034 	movhi	r2,0
10000630:	10800004 	addi	r2,r2,0
10000634:	10002526 	beq	r2,zero,100006cc <__register_exitproc+0x10c>
10000638:	01006404 	movi	r4,400
1000063c:	d9400015 	stw	r5,0(sp)
10000640:	d9800115 	stw	r6,4(sp)
10000644:	d9c00215 	stw	r7,8(sp)
10000648:	00000000 	call	10000000 <__reset>
1000064c:	d9400017 	ldw	r5,0(sp)
10000650:	d9800117 	ldw	r6,4(sp)
10000654:	d9c00217 	ldw	r7,8(sp)
10000658:	10001c26 	beq	r2,zero,100006cc <__register_exitproc+0x10c>
1000065c:	80c05217 	ldw	r3,328(r16)
10000660:	10000115 	stw	zero,4(r2)
10000664:	02400044 	movi	r9,1
10000668:	10c00015 	stw	r3,0(r2)
1000066c:	80805215 	stw	r2,328(r16)
10000670:	10006215 	stw	zero,392(r2)
10000674:	10006315 	stw	zero,396(r2)
10000678:	0007883a 	mov	r3,zero
1000067c:	883fdf26 	beq	r17,zero,100005fc <__alt_data_end+0xf80005fc>
10000680:	18d1883a 	add	r8,r3,r3
10000684:	4211883a 	add	r8,r8,r8
10000688:	1211883a 	add	r8,r2,r8
1000068c:	41802215 	stw	r6,136(r8)
10000690:	01000044 	movi	r4,1
10000694:	11806217 	ldw	r6,392(r2)
10000698:	20c8983a 	sll	r4,r4,r3
1000069c:	310cb03a 	or	r6,r6,r4
100006a0:	11806215 	stw	r6,392(r2)
100006a4:	41c04215 	stw	r7,264(r8)
100006a8:	01800084 	movi	r6,2
100006ac:	89bfd31e 	bne	r17,r6,100005fc <__alt_data_end+0xf80005fc>
100006b0:	11806317 	ldw	r6,396(r2)
100006b4:	3108b03a 	or	r4,r6,r4
100006b8:	11006315 	stw	r4,396(r2)
100006bc:	003fcf06 	br	100005fc <__alt_data_end+0xf80005fc>
100006c0:	80805304 	addi	r2,r16,332
100006c4:	80805215 	stw	r2,328(r16)
100006c8:	003fc706 	br	100005e8 <__alt_data_end+0xf80005e8>
100006cc:	00bfffc4 	movi	r2,-1
100006d0:	003fd106 	br	10000618 <__alt_data_end+0xf8000618>

100006d4 <__call_exitprocs>:
100006d4:	00840034 	movhi	r2,4096
100006d8:	1083ae04 	addi	r2,r2,3768
100006dc:	10800017 	ldw	r2,0(r2)
100006e0:	defff404 	addi	sp,sp,-48
100006e4:	dd800815 	stw	r22,32(sp)
100006e8:	d8800015 	stw	r2,0(sp)
100006ec:	10805204 	addi	r2,r2,328
100006f0:	dd000615 	stw	r20,24(sp)
100006f4:	dc800415 	stw	r18,16(sp)
100006f8:	dfc00b15 	stw	ra,44(sp)
100006fc:	df000a15 	stw	fp,40(sp)
10000700:	ddc00915 	stw	r23,36(sp)
10000704:	dd400715 	stw	r21,28(sp)
10000708:	dcc00515 	stw	r19,20(sp)
1000070c:	dc400315 	stw	r17,12(sp)
10000710:	dc000215 	stw	r16,8(sp)
10000714:	2025883a 	mov	r18,r4
10000718:	2829883a 	mov	r20,r5
1000071c:	d8800115 	stw	r2,4(sp)
10000720:	05bfffc4 	movi	r22,-1
10000724:	d8800017 	ldw	r2,0(sp)
10000728:	14c05217 	ldw	r19,328(r2)
1000072c:	98001d26 	beq	r19,zero,100007a4 <__call_exitprocs+0xd0>
10000730:	dd400117 	ldw	r21,4(sp)
10000734:	98800117 	ldw	r2,4(r19)
10000738:	173fffc4 	addi	fp,r2,-1
1000073c:	e0000d16 	blt	fp,zero,10000774 <__call_exitprocs+0xa0>
10000740:	14000044 	addi	r16,r2,1
10000744:	8421883a 	add	r16,r16,r16
10000748:	8421883a 	add	r16,r16,r16
1000074c:	84402004 	addi	r17,r16,128
10000750:	9c63883a 	add	r17,r19,r17
10000754:	9c21883a 	add	r16,r19,r16
10000758:	a0001e26 	beq	r20,zero,100007d4 <__call_exitprocs+0x100>
1000075c:	80804017 	ldw	r2,256(r16)
10000760:	15001c26 	beq	r2,r20,100007d4 <__call_exitprocs+0x100>
10000764:	e73fffc4 	addi	fp,fp,-1
10000768:	843fff04 	addi	r16,r16,-4
1000076c:	8c7fff04 	addi	r17,r17,-4
10000770:	e5bff91e 	bne	fp,r22,10000758 <__alt_data_end+0xf8000758>
10000774:	00800034 	movhi	r2,0
10000778:	10800004 	addi	r2,r2,0
1000077c:	10000926 	beq	r2,zero,100007a4 <__call_exitprocs+0xd0>
10000780:	98800117 	ldw	r2,4(r19)
10000784:	1000311e 	bne	r2,zero,1000084c <__call_exitprocs+0x178>
10000788:	98800017 	ldw	r2,0(r19)
1000078c:	10003426 	beq	r2,zero,10000860 <__call_exitprocs+0x18c>
10000790:	9809883a 	mov	r4,r19
10000794:	a8800015 	stw	r2,0(r21)
10000798:	00000000 	call	10000000 <__reset>
1000079c:	acc00017 	ldw	r19,0(r21)
100007a0:	983fe41e 	bne	r19,zero,10000734 <__alt_data_end+0xf8000734>
100007a4:	dfc00b17 	ldw	ra,44(sp)
100007a8:	df000a17 	ldw	fp,40(sp)
100007ac:	ddc00917 	ldw	r23,36(sp)
100007b0:	dd800817 	ldw	r22,32(sp)
100007b4:	dd400717 	ldw	r21,28(sp)
100007b8:	dd000617 	ldw	r20,24(sp)
100007bc:	dcc00517 	ldw	r19,20(sp)
100007c0:	dc800417 	ldw	r18,16(sp)
100007c4:	dc400317 	ldw	r17,12(sp)
100007c8:	dc000217 	ldw	r16,8(sp)
100007cc:	dec00c04 	addi	sp,sp,48
100007d0:	f800283a 	ret
100007d4:	98800117 	ldw	r2,4(r19)
100007d8:	80c00017 	ldw	r3,0(r16)
100007dc:	10bfffc4 	addi	r2,r2,-1
100007e0:	17001526 	beq	r2,fp,10000838 <__call_exitprocs+0x164>
100007e4:	80000015 	stw	zero,0(r16)
100007e8:	183fde26 	beq	r3,zero,10000764 <__alt_data_end+0xf8000764>
100007ec:	00800044 	movi	r2,1
100007f0:	1708983a 	sll	r4,r2,fp
100007f4:	98806217 	ldw	r2,392(r19)
100007f8:	9dc00117 	ldw	r23,4(r19)
100007fc:	2084703a 	and	r2,r4,r2
10000800:	1000061e 	bne	r2,zero,1000081c <__call_exitprocs+0x148>
10000804:	183ee83a 	callr	r3
10000808:	98800117 	ldw	r2,4(r19)
1000080c:	15ffc51e 	bne	r2,r23,10000724 <__alt_data_end+0xf8000724>
10000810:	a8800017 	ldw	r2,0(r21)
10000814:	14ffd326 	beq	r2,r19,10000764 <__alt_data_end+0xf8000764>
10000818:	003fc206 	br	10000724 <__alt_data_end+0xf8000724>
1000081c:	98806317 	ldw	r2,396(r19)
10000820:	2084703a 	and	r2,r4,r2
10000824:	1000061e 	bne	r2,zero,10000840 <__call_exitprocs+0x16c>
10000828:	89400017 	ldw	r5,0(r17)
1000082c:	9009883a 	mov	r4,r18
10000830:	183ee83a 	callr	r3
10000834:	003ff406 	br	10000808 <__alt_data_end+0xf8000808>
10000838:	9f000115 	stw	fp,4(r19)
1000083c:	003fea06 	br	100007e8 <__alt_data_end+0xf80007e8>
10000840:	89000017 	ldw	r4,0(r17)
10000844:	183ee83a 	callr	r3
10000848:	003fef06 	br	10000808 <__alt_data_end+0xf8000808>
1000084c:	98800017 	ldw	r2,0(r19)
10000850:	982b883a 	mov	r21,r19
10000854:	1027883a 	mov	r19,r2
10000858:	983fb61e 	bne	r19,zero,10000734 <__alt_data_end+0xf8000734>
1000085c:	003fd106 	br	100007a4 <__alt_data_end+0xf80007a4>
10000860:	0005883a 	mov	r2,zero
10000864:	003ffa06 	br	10000850 <__alt_data_end+0xf8000850>

10000868 <__mulsi3>:
10000868:	0005883a 	mov	r2,zero
1000086c:	20000726 	beq	r4,zero,1000088c <__mulsi3+0x24>
10000870:	20c0004c 	andi	r3,r4,1
10000874:	2008d07a 	srli	r4,r4,1
10000878:	18000126 	beq	r3,zero,10000880 <__mulsi3+0x18>
1000087c:	1145883a 	add	r2,r2,r5
10000880:	294b883a 	add	r5,r5,r5
10000884:	203ffa1e 	bne	r4,zero,10000870 <__alt_data_end+0xf8000870>
10000888:	f800283a 	ret
1000088c:	f800283a 	ret

10000890 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10000890:	defffd04 	addi	sp,sp,-12
10000894:	df000215 	stw	fp,8(sp)
10000898:	df000204 	addi	fp,sp,8
1000089c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100008a0:	0001883a 	nop
100008a4:	e0bfff17 	ldw	r2,-4(fp)
100008a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100008ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100008b0:	10000226 	beq	r2,zero,100008bc <_exit+0x2c>
    ALT_SIM_FAIL();
100008b4:	002af070 	cmpltui	zero,zero,43969
100008b8:	00000106 	br	100008c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100008bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100008c0:	003fff06 	br	100008c0 <__alt_data_end+0xf80008c0>
